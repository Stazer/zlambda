mod node;
mod packet;

////////////////////////////////////////////////////////////////////////////////////////////////////

pub use node::*;
pub use packet::*;

////////////////////////////////////////////////////////////////////////////////////////////////////

use serde::{Deserialize, Serialize};
use std::collections::{HashMap, HashSet};
use std::net::SocketAddr;

////////////////////////////////////////////////////////////////////////////////////////////////////

pub type ClientId = u64;

////////////////////////////////////////////////////////////////////////////////////////////////////

pub type NodeId = u64;

////////////////////////////////////////////////////////////////////////////////////////////////////

pub type ConnectionId = u64;

////////////////////////////////////////////////////////////////////////////////////////////////////

pub type TermId = u64;

////////////////////////////////////////////////////////////////////////////////////////////////////

pub type LogEntryId = u64;

////////////////////////////////////////////////////////////////////////////////////////////////////

#[derive(Clone, Debug, Deserialize, Serialize)]
pub enum LogEntryType {
    UpdateNodes(HashMap<NodeId, SocketAddr>),
    Add(i32),
}

////////////////////////////////////////////////////////////////////////////////////////////////////

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct CommittedLogEntry {
    id: LogEntryId,
    r#type: LogEntryType,
}

impl CommittedLogEntry {
    pub fn new(id: LogEntryId, r#type: LogEntryType) -> Self {
        Self { id, r#type }
    }

    pub fn id(&self) -> LogEntryId {
        self.id
    }

    pub fn r#type(&self) -> &LogEntryType {
        &self.r#type
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct LogEntry {
    id: LogEntryId,
    r#type: LogEntryType,
}

impl LogEntry {
    pub fn new(id: LogEntryId, r#type: LogEntryType) -> Self {
        Self { id, r#type }
    }

    pub fn id(&self) -> LogEntryId {
        self.id
    }

    pub fn r#type(&self) -> &LogEntryType {
        &self.r#type
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct ClusterData {
    term_id: TermId,
    node_id: NodeId,
    leader_node_id: NodeId,
    socket_addresses: HashMap<NodeId, SocketAddr>,
}
