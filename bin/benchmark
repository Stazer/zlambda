#!/usr/bin/env ruby

require 'pathname'
require 'securerandom'
require_relative 'configuration'
require 'fileutils'
require 'concurrent/executor/fixed_thread_pool'
require 'debug'
require 'json'

class ServerChooser
  def servers
    []
  end
end

class RandomServerChooser < ServerChooser
  def initialize(servers)
    @servers = servers
    @randomizer = Random.new
  end

  def next
    @servers[@randomizer.rand(@servers.length)]
  end

  def servers
    @servers
  end
end

class NoneServerChooser < ServerChooser
  def next
    nil
  end
end

class RoundRobinServerChooser < ServerChooser
  def initialize(servers)
    @servers = servers
    @counter = 0
  end

  def next
    item = @servers[@counter % @servers.length]
    @counter += 1

    item
  end

  def servers
    @servers
  end
end

class StaticServerChooser < ServerChooser
  def initialize(server)
    @server = server
  end

  def next
    @server
  end

  def servers
    [@server]
  end
end

class Executor
  def run(name, datasets, target, server_chooser)
    before_run

    results_path = "#{$results_path}/#{name}"

    FileUtils.mkdir_p(results_path)

    datasets.each do |left_dataset_path|
      datasets.each do |right_dataset_path|
        left_dataset_basename = Pathname.new(left_dataset_path).basename
        right_dataset_basename = Pathname.new(right_dataset_path).basename

        command = target.command(
          server_chooser.next,
          left_dataset_path,
          right_dataset_path,
          "#{results_path}/#{left_dataset_basename}x#{right_dataset_basename}",
        )

        execute(command)
      end
    end

    after_run
  end

  def before_run; end
  def after_run; end
end

class SequentialExecutor < Executor
  def execute(command)
    print("#{command}\n")
    system(command)
  end
end

class ParallelExecutor < Executor
  def execute(command)
    @pool << proc do
      print("#{command}\n")
      system(command)
    end
  end

  def before_run
    @pool = Concurrent::FixedThreadPool.new($parallel_execution_threads)
  end

  def after_run
    #while true
    #  break if @pool.queue_length == 0
    #end

    @pool.wait_for_termination

    @pool = nil
  end
end

class Target
end

class NativeTarget < Target
end

class NativeUnscheduledTarget < NativeTarget
  def command(server_address, left_dataset_path, right_dataset_path, result_path)
    "sh -c '#{$zlambda_cli_prefix} #{$zlambda_cli_path} client #{server_address} notify 7 #{left_dataset_path} #{right_dataset_path} 2> /dev/null > #{result_path}'"
  end
end

class NativeScheduledTarget < NativeTarget
  def command(server_address, left_dataset_path, right_dataset_path, result_path)
    "sh -c '#{$zlambda_cli_prefix} #{$zlambda_cli_path} client #{server_address} notify 2 payloads/native-scheduled.json #{left_dataset_path} #{right_dataset_path} 2> /dev/null > #{result_path}'"
  end
end

class WasmTarget < Target
end

class WasmUnscheduledTarget < WasmTarget
  def command(server_address, left_dataset_path, right_dataset_path, result_path)
    "sh -c '#{$zlambda_cli_prefix} #{$zlambda_cli_path} client #{server_address} notify 6 #{left_dataset_path} #{right_dataset_path} 2> /dev/null > #{result_path}'"
  end
end

class WasmScheduledTarget < WasmTarget
  def command(server_address, left_dataset_path, right_dataset_path, result_path)
    "sh -c '#{$zlambda_cli_prefix} #{$zlambda_cli_path} client #{server_address} notify 2 payloads/wasm-scheduled.json #{left_dataset_path} #{right_dataset_path} 2> /dev/null > #{result_path}'"
  end
end

class EbpfTarget < Target
  def command(server_address, left_dataset_path, right_dataset_path, result_path)
    "sh -c '#{$zlambda_cli_prefix} #{$zlambda_cli_path} ebpf #{server_address} < #{left_dataset_path} < #{right_dataset_path} 2> /dev/null > #{result_path}'"
  end
end

class ProcessTarget < Target
end

class ProcessCliTarget < Target
  def command(_server_address, left_dataset_path, right_dataset_path, result_path)
    "cat #{left_dataset_path} #{right_dataset_path} | sh -c '#{$zlambda_cli_prefix} #{$zlambda_cli_path} matrix' 2> /dev/null > #{result_path}"
  end
end

class ProcessServerTarget < ProcessTarget
end

class ProcessServerUnscheduledTarget < ProcessServerTarget
  def command(server_address, left_dataset_path, right_dataset_path, result_path)
    "sh -c '#{$zlambda_cli_prefix} #{$zlambda_cli_path} client #{server_address} notify 1 payloads/process-server.json #{left_dataset_path} #{right_dataset_path} 2> /dev/null > #{result_path}'"
  end
end

class ProcessServerScheduledTarget < ProcessServerTarget
  def command(server_address, left_dataset_path, right_dataset_path, result_path)
    "sh -c '#{$zlambda_cli_prefix} #{$zlambda_cli_path} client #{server_address} notify 2 payloads/process-server-scheduled-0.json payloads/process-server-scheduled-1.json #{left_dataset_path} #{right_dataset_path} 2> /dev/null > #{result_path}'"
  end
end

class WaitAndCreate < Target
end

class WaitAndCreateCluster < WaitAndCreate
  def command(server_address, _left_dataset_path, _right_dataset_path, _result_path)
    "sh -c '#{$zlambda_cli_prefix} #{$zlambda_cli_path} client #{server_address} -e notify 9 payloads/schedule-wait-and-create-cluster.json payloads/process-wait-and-create-cluster.json 2> /dev/null'"
  end
end

class WaitAndCreateStandalone < WaitAndCreate
  def command(server_address, _left_dataset_path, _right_dataset_path, _result_path)
    "sh -c '#{$zlambda_cli_prefix} #{$zlambda_cli_path} client #{server_address} -e notify 1 payloads/process-wait-and-create-standalone.json 2> /dev/null'"
  end
end

class Benchmark
  attr_reader :name

  def initialize(name, target, server_chooser)
    @name = name
    @target = target
    @server_chooser = server_chooser
  end

  def run(executor, datasets)
    executor.run(@name, datasets, @target, @server_chooser)
  end

  def server_commands
    [
      "#{$zlambda_cli_path} server 0.0.0.0:#{$server_addresses[0].split(':')[1]} leader",
      *$server_addresses[1..]
         .map.with_index { |x, i| "#{$zlambda_cli_path} server 0.0.0.0:#{x.split(':')[1]} follower #{$server_addresses[0]} #{i + 1}" }
    ].join("\n")
  end
end

BENCHMARKS = [
  Benchmark.new('native-unscheduled', NativeUnscheduledTarget.new, StaticServerChooser.new($server_addresses[0])),
  Benchmark.new('native-scheduled1', NativeScheduledTarget.new, StaticServerChooser.new($server_addresses[0])),
  Benchmark.new('native-scheduled2-rnd', NativeScheduledTarget.new, RandomServerChooser.new($server_addresses[0..1])),
  Benchmark.new('native-scheduled2-rr', NativeScheduledTarget.new, RoundRobinServerChooser.new($server_addresses[0..1])),
  Benchmark.new('native-scheduled2-lo', NativeScheduledTarget.new, StaticServerChooser.new($server_addresses[0])),
  Benchmark.new('native-scheduled2-fo', NativeScheduledTarget.new, StaticServerChooser.new($server_addresses[1])),
  Benchmark.new('native-scheduled3-rnd', NativeScheduledTarget.new, RandomServerChooser.new($server_addresses[0..2])),
  Benchmark.new('native-scheduled3-rr', NativeScheduledTarget.new, RoundRobinServerChooser.new($server_addresses[0..2])),
  Benchmark.new('native-scheduled3-lo', NativeScheduledTarget.new, StaticServerChooser.new($server_addresses[0])),
  Benchmark.new('native-scheduled3-fo', NativeScheduledTarget.new, StaticServerChooser.new($server_addresses[1])),

  Benchmark.new('process-cli', ProcessCliTarget.new, NoneServerChooser.new),
  Benchmark.new('process-server-unscheduled', ProcessServerUnscheduledTarget.new, StaticServerChooser.new($server_addresses[0])),
  Benchmark.new('process-server-scheduled1', ProcessServerScheduledTarget.new, StaticServerChooser.new($server_addresses[0])),
  Benchmark.new('process-server-scheduled2-rnd', ProcessServerScheduledTarget.new, RandomServerChooser.new($server_addresses[0..1])),
  Benchmark.new('process-server-scheduled2-rr', ProcessServerScheduledTarget.new, RoundRobinServerChooser.new($server_addresses[0..1])),
  Benchmark.new('process-server-scheduled2-lo', ProcessServerScheduledTarget.new, StaticServerChooser.new($server_addresses[0])),
  Benchmark.new('process-server-scheduled2-fo', ProcessServerScheduledTarget.new, StaticServerChooser.new($server_addresses[1])),
  Benchmark.new('process-server-scheduled3-rnd', ProcessServerScheduledTarget.new, RandomServerChooser.new($server_addresses[0..2])),
  Benchmark.new('process-server-scheduled3-rr', ProcessServerScheduledTarget.new, RoundRobinServerChooser.new($server_addresses[0..2])),
  Benchmark.new('process-server-scheduled3-lo', ProcessServerScheduledTarget.new, StaticServerChooser.new($server_addresses[0])),
  Benchmark.new('process-server-scheduled3-fo', ProcessServerScheduledTarget.new, StaticServerChooser.new($server_addresses[1])),

  Benchmark.new('wasm-unscheduled', WasmUnscheduledTarget.new, StaticServerChooser.new($server_addresses[0])),
  Benchmark.new('wasm-scheduled1', WasmScheduledTarget.new, StaticServerChooser.new($server_addresses[0])),
  Benchmark.new('wasm-scheduled2-rnd', WasmScheduledTarget.new, RandomServerChooser.new($server_addresses[0..1])),
  Benchmark.new('wasm-scheduled2-rr', WasmScheduledTarget.new, RoundRobinServerChooser.new($server_addresses[0..1])),
  Benchmark.new('wasm-scheduled2-lo', WasmScheduledTarget.new, StaticServerChooser.new($server_addresses[0])),
  Benchmark.new('wasm-scheduled2-fo', WasmScheduledTarget.new, StaticServerChooser.new($server_addresses[1])),
  Benchmark.new('wasm-scheduled3-rnd', WasmScheduledTarget.new, RandomServerChooser.new($server_addresses[0..2])),
  Benchmark.new('wasm-scheduled3-rr', WasmScheduledTarget.new, RoundRobinServerChooser.new($server_addresses[0..2])),
  Benchmark.new('wasm-scheduled3-lo', WasmScheduledTarget.new, StaticServerChooser.new($server_addresses[0])),
  Benchmark.new('wasm-scheduled3-fo', WasmScheduledTarget.new, StaticServerChooser.new($server_addresses[1])),

  Benchmark.new('ebpf', EbpfTarget.new, StaticServerChooser.new($ebpf_socket_addresses[0])),
  Benchmark.new('ebpf2-rnd', EbpfTarget.new, RandomServerChooser.new($ebpf_socket_addresses[0..1])),
  Benchmark.new('ebpf2-rr', EbpfTarget.new, RoundRobinServerChooser.new($ebpf_socket_addresses[0..1])),
  Benchmark.new('ebpf3-rnd', EbpfTarget.new, RandomServerChooser.new($ebpf_socket_addresses[0..2])),
  Benchmark.new('ebpf3-rr', EbpfTarget.new, RoundRobinServerChooser.new($ebpf_socket_addresses[0..2])),

  Benchmark.new('wait-and-create-cluster', WaitAndCreateCluster.new, RoundRobinServerChooser.new($server_addresses[0..2])),
  Benchmark.new('wait-and-create-standalone', WaitAndCreateStandalone.new, RoundRobinServerChooser.new($server_addresses[0..2])),
]

BENCHMARK_BY_NAME = Hash[BENCHMARKS.map { |x| [x.name, x] }]

def convert_times(time)
  ["#{time}ns,", "#{time / 1000.0}μs", "#{time / 1_000_000.0}ms", "#{time / 1_000_000_000.0}s"]
end

def calculate(result_name)
  measurement_names = available_result_measurement_names(result_name)

  measurements = measurement_names.map do |measurement|
    File.open("#{$results_path}/#{result_name}/#{measurement}", 'rb') do |file|
      file.seek(-3 * 16, IO::SEEK_END)

      bytes = file.read(3 * 16)

      calculation_time = bytes[0..15].unpack("C*").map { |x| '%02X' % x }.reverse.join.to_i(16)
      program_time = bytes[16..31].unpack("C*").map { |x| '%02X' % x }.reverse.join.to_i(16)
      total_time = bytes[32..47].unpack("C*").map { |x| '%02X' % x }.reverse.join.to_i(16)

      if calculation_time > program_time || calculation_time > total_time || program_time > total_time
        puts "Something unexpected happened. Running debug shell..."
        binding.break
      end

      [
        calculation_time.to_f,
        program_time.to_f,
        total_time.to_f,
      ]
    end
  end

  averages = measurements.reduce({ calculation: 0.0, program: 0.0, total: 0.0 }) do |carry, item|
    Hash[
      [:calculation, :program, :total].map.with_index do |type, index|
        [type, carry[type] + (item[index] / measurements.length)]
      end
    ]
  end

  variances = measurements.reduce({ calculation: 0.0, program: 0.0, total: 0.0 }) do |carry, item|
    Hash[
      [:calculation, :program, :total].map.with_index do |type, index|
        [
          type,
          carry[type] + (item[index] - averages[type])**2 / (measurements.length - 1)
        ]
      end
    ]
  end

  deviations = Hash[variances.map { |key, variance| [key, Math.sqrt(variance)] }]

  {
    averages: averages,
    variances: variances,
    deviations: deviations,
  }
end

def run(name)
  BENCHMARK_BY_NAME[name].run(
    SequentialExecutor.new,
    available_datasets,
  )

  File.write("#{$calculations_path}/#{name}.json", JSON.dump(calculate(name)))
end

BENCHMARK_BY_NAME['wait-and-create-standalone'].run(
  SequentialExecutor.new,
  (0..4).map { |x| x.to_s }.to_a,
)
